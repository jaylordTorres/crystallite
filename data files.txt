import React, { Component } from "react";
import { Platform, StyleSheet, Text, View, AsyncStorage, Alert,TouchableOpacity } from "react-native";
import firebase from "react-native-firebase";
import FlashMessage, {
  showMessage,
  hideMessage
} from "react-native-flash-message";
import {
  Container,
  Header,
  Title,
  Content,
  Icon,
  Card,
  CardItem,
  Item,
  Body,
  Right,
  Button,
  Input,
  Form,
  Textarea,
  Left
} from "native-base";

export default class App extends Component {
  constructor(props){
    super(props)
    
    this.state = {
      descriptionText : 'some default value or empty string',
      name: null,
      mobile: null,
      email: null,
      msg: null,
      token: '',
      isSubmited: false
    }
  }

  // Register  User

  registerUser = (
    name,
    mobile,
    email,
    msg,
    token,
    nameClear,
    mobileClear,
    emailClear,
    msgClear
  ) => {
    if (this.state.msg != null) {
      fetch("https://practice-project-c9721.firebaseio.com/contacts.json", {
        method: "POST",
        headers: {
          Accept: "application/json",
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          name: name,
          mobile: mobile,
          email: email,
          msg: msg,
          token: token
        })
      })
        .then(response => response.json())
        .then(responseData => {
          if (responseData.name != null) {
            this.refs[nameClear].setNativeProps({ text: "" });
            this.refs[mobileClear].setNativeProps({ text: "" });
            this.refs[emailClear].setNativeProps({ text: "" });
            this.refs[msgClear].setNativeProps({ text: "" });
            this.setState({
              name: null,
              mobile: null,
              email: null,
              msg: null,
              isSubmited: true,
            });
          } else {
            Alert.alert(
              "Oops !",
              "Something went wrong",
              [
                {
                  text: "OK",
                  onPress: () => console.log("Cancel Pressed"),
                  style: "cancel"
                }
              ],
              { cancelable: false }
            );
          }
        })
        .done();
    } else {
      Alert.alert(
        "Oops !",
        "Press SUBMIT button after entering your message",
        [
          {
            text: "OK",
            onPress: () => console.log("Cancel Pressed"),
            style: "cancel"
          }
        ],
        { cancelable: false }
      );
    }
  };
  
  _togglePostCard() {
    this.setState({
      isSubmited: false
    });
  }

  
  
  async componentDidMount() {
    this.checkPermission();
    this.createNotificationListeners();
  }

  
  //1
  async checkPermission() {
    firebase
      .messaging()
      .hasPermission()
      .then(enabled => {
        if (enabled) {
          // user has permissions
          console.log("Permission granted");
          this.getToken();
        } else {
          // user doesn't have permission
          console.log("Permission request");
          this.requestPermission();
        }
      });

    // const enabled = await firebase.messaging().hasPermission();
    // if (enabled) {
    //   this.getToken();
    // } else {
    //   this.requestPermission();
    // }
  }

  //3
  async getToken() {
    let fcmToken = await AsyncStorage.getItem("fcmToken");
    console.log("before fcmtoken", fcmToken);
    // console.warn(fcmToken);
    this.setState({
      token: fcmToken
    })
    
    if (!fcmToken) {
      fcmToken = await firebase.messaging().getToken();
      if (fcmToken) {
        // user has a device token
        await AsyncStorage.setItem("fcmToken", fcmToken);
        console.log("after fcmtoken", fcmToken);
      }
    }
  }

  //2
  async requestPermission() {
    // try {
    //   await firebase.messaging().requestPermission();
    //   // User has authorised
    //   this.getToken();
    // } catch (error) {
    //   // User has rejected permissions
    //   console.log("permission rejected");
    // }

    firebase
      .messaging()
      .requestPermission()
      .then(() => {
        // User has authorised
        console.log("Permission granted in requestPermission");
        this.getToken();
      })
      .catch(error => {
        // User has rejected permissions
        console.log("permission rejected");
      });
  }

  ////////////////////// Add these methods //////////////////////

  //Remove listeners allocated in createNotificationListeners()
  componentWillUnmount() {
    this.notificationListener();
    this.notificationOpenedListener();
  }

  async createNotificationListeners() {
    /*
     * Triggered when a particular notification has been received in foreground
     * */
    this.notificationListener = firebase
      .notifications()
      .onNotification(notification => {
        const { title, body, sound } = notification;
        this.showAlert(title, body, sound);
       
      });
    /*
     * If your app is in background, you can listen for when a notification is clicked / tapped / opened as follows:
     * */
    this.notificationOpenedListener = firebase
      .notifications()
      .onNotificationOpened(notificationOpen => {
        const { title, body, sound } = notificationOpen.notification;
        this.showAlert(title, body, sound);
        
      });

    /*
     * If your app is closed, you can check if it was opened by a notification being clicked / tapped / opened as follows:
     * */
    const notificationOpen = await firebase
      .notifications()
      .getInitialNotification();
    if (notificationOpen) {
      const { title, body, sound } = notificationOpen.notification;
      this.showAlert(title, body, sound);
    
    }
    /*
     * Triggered for data only payload in foreground
     * */
    this.messageListener = firebase.messaging().onMessage(message => {
      //process data message
      console.log(JSON.stringify(message));
    });
    
  }

  render() {
    return (
      // <View style={styles.container}>
      //   <Text style={styles.welcome}>Welcome to React Native!</Text>
       
      //    <FlashMessage position="top"/>
      // </View>
      <Container>
      <Header
        androidStatusBarColor="#1362af"
        style={{ backgroundColor: "#1976D2" }}
      >
      
        <Body
          style={{
            flex: 1,
            flexDirection: "column",
            justifyContent: "center",
            alignItems: "center"
          }}
        >
          <Title>CONTACT</Title>
        </Body>
      </Header>
      <Content>
        <Card style={styles.postCard}>
          {this.state.isSubmited ? (
            <View>
              <CardItem>
                <Item>
                  <Icon
                    activename="ios-checkmark-circle"
                    style={{
                      fontSize: 30,
                      color: "#4CAF50",
                      marginLeft: 5,
                      marginRight: 10
                    }}
                  />
                  <Text style={{ flex: 1 }}>
                    Thanks. We will get in touch with you as soon as possible
                  </Text>
                </Item>
              </CardItem>
              <CardItem>
                <Left />
                <Body>
                  <TouchableOpacity
                    success
                    onPress={() => this._togglePostCard.bind(this)}
                  >
                    <Icon
                      active
                      name="refresh"
                      style={{
                        fontSize: 50,
                        color: "#64DD17",
                        marginLeft: 10
                      }}
                    />
                  </TouchableOpacity>
                </Body>
                <Right />
              </CardItem>
            </View>
          ) : (
            <View>
              <CardItem>
                <Item>
                  <Input
                    placeholder="Name"
                    onChangeText={name => this.setState({ name })}
                    ref={"nameClear"}
                  />
                </Item>
              </CardItem>
              <CardItem>
                <Item>
                  <Input
                    placeholder="Mobile"
                    onChangeText={mobile => this.setState({ mobile })}
                    ref={"mobileClear"}
                    keyboardType={"phone-pad"}
                  />
                </Item>
              </CardItem>
              <CardItem>
                <Item>
                  <Input
                    placeholder="Email"
                    onChangeText={email => this.setState({ email })}
                    ref={"emailClear"}
                    keyboardType={"email-address"}
                  />
                </Item>
              </CardItem>
              <Form style={{ marginLeft: 20, marginRight: 20 }}>
                <Textarea
                  arearowSpan={5}
                  bordered 
                  placeholder="Type your message"
                  onChangeText={msg => this.setState({ msg })}
                  ref={"msgClear"}
                />
              </Form>
              <CardItem>
                <Left />
                <Body>
                  <Button
                    success
                    onPress={() =>
                      this.registerUser(
                        this.state.name,
                        this.state.mobile,
                        this.state.email,
                        this.state.msg,
                        this.state.token,
                        "nameClear",
                        "mobileClear",
                        "emailClear",
                        "msgClear"
                      )
                    }
                  >
                    <Text>SUBMIT</Text>
                  </Button>
                </Body>
                <Right />
              </CardItem>
            </View>
          )}
        </Card>
      </Content>
      <FlashMessage position="top"/>
    </Container>
     
    );
  }

  
  showAlert(title, body) {
    // Alert.alert(
    //   title, body,
    //   [
    //       { text: 'OK', onPress: () => console.log('OK Pressed') },
    //   ],
    //   { cancelable: false },
    // );

    showMessage({
      message: body,
      description:title,
      type: "info",
      floating: true,
      icon: 'info'
    });
 
  }

}


const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "#F5FCFF"
  },
  welcome: {
    fontSize: 20,
    textAlign: "center",
    margin: 10
  },
  instructions: {
    textAlign: "center",
    color: "#333333",
    marginBottom: 5
  },
  postCard: {
    marginLeft:25,
    marginRight:25,
    marginTop:20,
    marginBottom:20,
  }
});



